Wishlist
--------

TODO: optimize x86 instr encoding based on usage
- e.g.: reg64 to mem move and vice versa?
- do profiling first

TODO: produce 32-bit offsets/addresses in CodeBlock.toString

TODO: execHeap collection/expansion
- Marc says: not on critical path for paper

TODO: arrays, functions, have obj ptr inside, drop object inheritance system
- Arrays: how do we handle resizing, use a next pointer? Store length
  - Need to check elem < length anyways before reading?

TODO: typed arrays
- Will save many many type checks on some benchmarks
  - e.g. : integer, FFT

TODO: look at https://github.com/dntj/jsfft
- Do they have a test/benchmark of the FFT?

FIXME: string concat is very slow right now... can we make it faster?
- slow benchmarks: string-base64, string-fasta, splay
- can we get the offset of the string data? str_ofs_data(s, 0)
- create a memcpy IR instr?
    import std.c.string;
    memcpy ( void * destination, const void * source, size_t num );
    issue: spilling required
    could generate custom code

TODO: block-internal jumps, can they all fit in 8-bit indices? force?
- can maybe "promise" it will fit

TODO: val can be both in reg and stack

TODO: transform jit.compileUnit into jit.execUnit
- Do parsing, AST->IR and call in there, better time accounting?
- Any real reason not to?
- alternative: try to treat unit functions more like other functions
  - create closure objects for them
  - create some sort of closure call bridge with a C call conv
  - having a "C adapter" for a specific closure seems sensible

TODO: add tests for nested eval support
- accessing local vars, changing vars
TODO: implement full eval support
- eval can be called as global eval or local eval
  - different "eval context"
- if direct/local eval possible, function must behave as if all locals could be captured
  - graft new IR sub-function into parent? don't add to sub list, but have parent link set
- parse AST, optionally set parent link, run AST vars pass
  - may want to pass a parent ptr to AST parsing function
- eval_str function needs to find who the caller is, determine if direct call?
  - call instr to get_global "eval"
  - VM.getCallInstr?
- need to "ungraft" the AST after vars analysis?
- PROBLEM: there's no parent pointer in AST nodes
  - can't just run vars analysis on subfunction, need to rerun the whole thing...

TODO: look into jetstream benchmarks
https://www.webkit.org/blog/3418/introducing-the-jetstream-benchmark-suite/

TODO: complete WAV output support, test it out with sine wave

TODO: take a break, look into sound output
- work on this in dev-maxime branch ***
- look at existing code
  - can write and wait for poll, no callback

TODO: port CSG lib
http://evanw.github.io/csg.js/













[DONE] TODO: not missing global prop opt?
- observation: if read once, we know its not missing

[DONE] TODO: accelerate getPropObj, make more hosted?
- generate optimized machine code? inline cache?

[DONE] TODO: proper hidden classes, support for property enumeration?
- Type information in hidden classes too?

[DONE] Idea: getters/setters + never used opt?
- Need to be able to invalidate code depending on this
- segregate by property name, much more effective

[DONE] TODO: lib/plot using image lib
- look into terminology
- look into how matplotlib does it
- short blog post, bitcoin
- demo plotting stock data
  - bitcoin price CSV?
- plot.graph(width, height, points, xFirst, xLast, yMin, yMax)
  - but this will only draw one function
  - can be OK to start
- need to be able to update the plots over time
  - plot functions should take a window object to draw into

[DONE] TODO: pixel plotting, drawing window lib? lib/draw
- Probably will want to use X11
  - implement a lib/x11
  - need an event loop
- Can have a draw lib which creates a window using lib/x11 and sets up a
  basic event loop
  - allows setting callbacks for KB and mouse events
  - allows calling a function in the loop
- Make another lib to read from the console without blocking
  - use select() on stdin
  - Can then implement our own REPL on top
  - not a priority for now, don't need REPL to implement games and such
